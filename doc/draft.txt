<h2>Welcome to sfDynamicsPlugin homepage</h2>
<p>
  Welcome on sfDynamicsPlugin homepage. This symfony plugin aims to revolution the way javascript is used in symfony projects. It supports
  extensible configuration, library dependances, stylesheets, i18n, themes, packing, caching, and much more. To have a detailed explanation of
  each features, please take a look at the <a href="<?php echo url_for('public/features'); ?>">features list</a>
</p>
<p>
  This plugin is not bound to a specific javascript framework, and provides an easy way to use one set of scripts alltogether. For now, only configuration
  files for jQuery and jQuery UI are provided, but our XML based configuration system allows to create different configuration packages describing
  how each framework interacts with each of their associated libraries.
</p>
<p>
  We're actively looking for configuration writers maintainers for all the following javascript frameworks:
</p>
<ul>
  <li>Prototype + scriptaculous</li>
  <li>Yahoo UI</li>
  <li>ExtJS</li>
  <li>Mootools</li>
  <li>Dojo</li>
</ul>
<p>
  To know what configuration packages looks like, have a look at the <a href="<?php echo url_for('public/configuration'); ?>">configuration documentation</a>.
</p>
<p>
  If you're interested in contributing to the plugin, have a look at the <a href="<?php echo url_for('public/contribute'); ?>">contribute page</a>
</p>

<h2>History</h2>
<p>
  This plugin is a result of much tries all refactored into one robust implementation of what we believe will be a real enterprise ready
  alternative to the yet unreplaced old school symfony 1.0 javascript helpers.
</p>


<h2>Configuration<h2>
<h3>Overview</h3>
<p>
  sfDynamics configuration files are XML files describing javascript <em>packages</em>. Each <em>package</em> corresponds to a list of dependances
  (<em>require</em>), a list of conflicts (<em>conflict</em>), a list of <em>javascript</em> assets and <em>stylesheet</em> assets, and eventually
  <em>i18n</em> and <em>theme</em> sections.
</p>
<p>
  Our configuration system supports destructive inheritance between files, allowing to have default configuration provided with the plugin, which is
  overridable by projects and applications, on a per file basis.
</p>

<h3>Sample</h3>

<h3>Configuration Reference</h3>

<h4>dynamics</h4>
<p>
  This is the root node. Each file must have one <em>dynamics</em> file and only one, containing all other tags. It has no attributes.
</p>

<h4>import</h4>
<p>
  <em>Import</em> tags are used to fetch configuration from other files. Importing files obey to few rules:
  <ul>
    <li>Imported <em>package</em>s replace already configured <em>package</em>s</li>
    <li>If more than one file of the same name is present in the plugin, the project and the application, the one from application always takes
        precedence on the one from the project, which takes precedence on the one from the plugin.</li>
    <li>An <em>import</em> clause will always include only one file, following the previous rule.</li>
  </ul>
</p>
<p class="example">
  &lt;import&gt;myconfig.xml&lt;/import&gt;
</p>

<h4>package</h4>
<h4>javascript</h4>
<h4>stylesheet</h4>
<h4>i18n</h4>
<h4>theme</h4>
