# Configuration

## Overview

sfDynamics configuration files are XML files describing javascript `packages`. Each `package` corresponds to a list of dependances
(`require`), a list of conflicts (`conflict`), a list of `javascript` assets and `stylesheet` assets, and eventually
`i18n` and `theme` sections.

Our configuration system supports destructive inheritance between files, allowing to have default configuration provided with the plugin, which is
overridable by projects and applications, on a per file basis.

### Sample

## Configuration Reference

### dynamics

#### Description

This is the root node. Each file must have one `dynamics` file and only one, containing all other tags. It has no attributes.

#### Children nodes

  * `import`: optional, any number
  * `package`: optional, any number

#### PHP definition

The `dynamics` tags are managed by one instance of `sfDynamicsConfigDefinition` that will merge all root tags of the different
XML configuration files included.


### import

#### Description

`Import` tags are used to fetch configuration from other files. Importing files obey to few rules:

  * Imported `package`s replace already configured `package`s
  * If more than one file of the same name is present in the plugin, the project and the application, the one from application always
    takes precedence on the one from the project, which takes precedence on the one from the plugin.
  * An `import` clause will always include only one file, following the previous rule.

#### Children nodes

`Import` tags has no children.

#### PHP definition

An `import` tag is taken care about by the parent's `sfDynamicsConfigDefinition` instance.

#### Example

[xml]
  <import>myconfig.xml</import>
[/xml]


### package

#### Description

A `package` tag describes a set of javascripts working altogether with optional stylesheets. In fact even javascripts are optionnal, but
an empty package would be a pretty unuseful one.

If you define a «mypackage» `package`, you'll be able to include it in your PHP code with the following code:

[php]
  sfDynamics::load('mypackage');
[/php]

It will automatically load every needed files, taking care of dependances, `i18n` (if available), `theme` (if available), and
will throw an `sfDynamicsConflictException` if any conflict is found. If you're not running your app in debug mode, it will also
take care of {link:packing} all package files.

#### Children nodes

  * `javascript`: optional, any number
  * `stylesheet`: optional, any number
  * `i18n`: optional, one by language needing additional `javascript`/`stylesheet` tags
  * `theme`: optional, one by theme needing additional `javascript`/`stylesheet` tags

#### PHP definition

A `package` tag's content is handled by an `sfDynamicsPackageDefinition` instance.


### javascript

#### Description

Adds a javascript asset dependance to the parent (most probably a `package`). It only contains text, which is the logic path to the matching
file. See {{{logic_paths|paths and inheritance}}}

#### Children nodes

`Javascript` tags has no children.

#### PHP definition

An `javascript` tag is taken care about by the parent's `sfDynamicsAssetCollectionDefinition` instance.

#### Example

[xml]
  <javascript>jquery/jquery</javascript>
[/xml]

### stylesheet

#### Description

Adds a javascript asset dependance to the parent (most probably a `package`). It only contains text, which is the logic path to the matching
file. See {{{logic_paths|paths and inheritance}}}

#### Children nodes

`Javascript` tags has no children.

#### PHP definition

An `javascript` tag is taken care about by the parent's `sfDynamicsAssetCollectionDefinition` instance.

#### Example

[xml]
  <javascript>jquery/jquery</javascript>
[/xml]


### i18n

Not yet implemented


### theme

Not yet implemented

